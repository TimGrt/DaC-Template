{"config":{"indexing":"full","lang":["de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s]"},"docs":[{"location":"","text":"Technische Dokumentation \"as-Code\" Hier findet sich die komplette Dokumentation und Anweisungen f\u00fcr die Installation, Konfiguration und Nutzung des Templates. Versionierung Das Template wird st\u00e4ndig aktualisiert, zuletzt am 5. Oktober 2022 . Idee Das Ziel dieses Projekts ist die Bereitstellung eines einfachen Templates f\u00fcr das Schreiben von (technischer) Dokumentation w\u00e4hrend eines Projekts. \u00dcbersicht Die web-basierte Version des Betriebshandbuchs zeigt im oberen Bereich die einzelnen Sektionen. Die Sektionen b\u00fcndeln Kapitel zu dem entsprechenden Thema und dienen der besseren \u00dcbersichtlichkeit. Das Hauptfenster ist drei-geteilt, auf der linken Seite sind die einzelnen Kapitel der Sektion zu finden, in der Mitte der Inhalt, auf der rechten Seite sind die einzelnen Unter-Abschnitte des derzeitig angezeigt Inhalts zu sehen. Im oberen Navigationsbanner ist eine Suchfunktion implementiert, links daneben kann \u00fcber eine Schieberegler die Dokumentation im Dark Mode angezeigt werden.","title":"Home"},{"location":"#technische-dokumentation-as-code","text":"Hier findet sich die komplette Dokumentation und Anweisungen f\u00fcr die Installation, Konfiguration und Nutzung des Templates. Versionierung Das Template wird st\u00e4ndig aktualisiert, zuletzt am 5. Oktober 2022 .","title":"Technische Dokumentation \"as-Code\""},{"location":"#idee","text":"Das Ziel dieses Projekts ist die Bereitstellung eines einfachen Templates f\u00fcr das Schreiben von (technischer) Dokumentation w\u00e4hrend eines Projekts.","title":"Idee"},{"location":"#ubersicht","text":"Die web-basierte Version des Betriebshandbuchs zeigt im oberen Bereich die einzelnen Sektionen. Die Sektionen b\u00fcndeln Kapitel zu dem entsprechenden Thema und dienen der besseren \u00dcbersichtlichkeit. Das Hauptfenster ist drei-geteilt, auf der linken Seite sind die einzelnen Kapitel der Sektion zu finden, in der Mitte der Inhalt, auf der rechten Seite sind die einzelnen Unter-Abschnitte des derzeitig angezeigt Inhalts zu sehen. Im oberen Navigationsbanner ist eine Suchfunktion implementiert, links daneben kann \u00fcber eine Schieberegler die Dokumentation im Dark Mode angezeigt werden.","title":"\u00dcbersicht"},{"location":"ci-cd/ci-cd/","text":"Pipeline Github Pages F\u00fcr einen automatischen Rebuild der Dokumentation in Github Pages durch Github Actions muss im Projekt-Hauptverzeichnis die Datei .github/workflows erstellt werden --- name : Deploy MkDocs to Github pages on : workflow_dispatch : push : branches : - main pull_request : branches : - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip3 install -r requirements.txt - run : mkdocs gh-deploy --force Hier wird bei jedem Push oder Pull-Request gegen den main -Branch (oder durch einen manuellen Trigger) die Pipeline ausgef\u00fchrt. Gitlab Eine m\u00f6gliche Pipeline ausgef\u00fchrt \u00fcber einen Gitlab-Runner k\u00f6nnte folgenderma\u00dfen aussehen, die Datei muss als .gitlab-ci.yml im Projekt-Hauptverzeichnis hinterlegt sein: variables : GIT_STRATEGY : clone stages : - build Build and deploy : stage : build only : - master - web script : - 'echo -e \"### Build new instance with Docker-compose. ###\"' - 'docker-compose up -d --build' tags : - handbuch Hier wird ein docker-compose -File angesprochen, in welchem der Image-Rebuild und Start eines Docker-Containers aus diesem Build definiert ist: version : \"3.3\" services : web : build : . image : handbuch ports : - \"13000:80\" restart : always container_name : betriebshandbuch","title":"Pipeline"},{"location":"ci-cd/ci-cd/#pipeline","text":"","title":"Pipeline"},{"location":"ci-cd/ci-cd/#github-pages","text":"F\u00fcr einen automatischen Rebuild der Dokumentation in Github Pages durch Github Actions muss im Projekt-Hauptverzeichnis die Datei .github/workflows erstellt werden --- name : Deploy MkDocs to Github pages on : workflow_dispatch : push : branches : - main pull_request : branches : - main jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/setup-python@v2 with : python-version : 3.x - run : pip3 install -r requirements.txt - run : mkdocs gh-deploy --force Hier wird bei jedem Push oder Pull-Request gegen den main -Branch (oder durch einen manuellen Trigger) die Pipeline ausgef\u00fchrt.","title":"Github Pages"},{"location":"ci-cd/ci-cd/#gitlab","text":"Eine m\u00f6gliche Pipeline ausgef\u00fchrt \u00fcber einen Gitlab-Runner k\u00f6nnte folgenderma\u00dfen aussehen, die Datei muss als .gitlab-ci.yml im Projekt-Hauptverzeichnis hinterlegt sein: variables : GIT_STRATEGY : clone stages : - build Build and deploy : stage : build only : - master - web script : - 'echo -e \"### Build new instance with Docker-compose. ###\"' - 'docker-compose up -d --build' tags : - handbuch Hier wird ein docker-compose -File angesprochen, in welchem der Image-Rebuild und Start eines Docker-Containers aus diesem Build definiert ist: version : \"3.3\" services : web : build : . image : handbuch ports : - \"13000:80\" restart : always container_name : betriebshandbuch","title":"Gitlab"},{"location":"docker/docker/","text":"Docker Image-Varianten Das Docker Image wird in zwei unterschiedlichen Varianten angeboten, in beiden Varianten wird die Dokumentation als Webserver bereitgestellt. Auch die Funktionalit\u00e4ten in der Web-Version (z.B. selbstst\u00e4ndiges sortieren von Tabellen, gerenderte Mermaid-Diagramme, etc.) unterscheiden sich nicht. Der gro\u00dfe Unterschied ist die Generierung einer PDF aus der kompletten Dokumentation, diese ist \u00fcber den Webserver abrufbar. F\u00fcr die PDF-Generierung sind eine Anzahl an zus\u00e4tzlichen RPM- und Python-Paketen notwendig, dies f\u00fchrt zu einem gr\u00f6\u00dferen Image ( ~170 MB vs. ~765 MB). Wenn eine PDF nicht notwendig ist, sollte das slim -Image verwendet werden. Variante Gr\u00f6\u00dfe slim ~170 MB pdf ~765 MB Slim -Variante Die folgende Container-Definition wird f\u00fcr die Slim -Variante verwendet: FROM python:3.8-slim WORKDIR /tmp # Copy Python packages/dependencies file COPY dockerfiles/slim/requirements.txt . # Update pip and install Python dependencies RUN python3 -m pip install --no-cache-dir -U pip RUN python3 -m pip install --no-cache-dir -r requirements.txt # Copy documentation source files to working directory COPY docs docs COPY dockerfiles/slim/mkdocs.yml . # Build new documentation RUN mkdocs build EXPOSE 80 # Run webserver CMD python -m http.server 80 -d site/ Die verwendeten Python-Pakete in der requirements.txt mkdocs mkdocs - material == 7.3.6 mkdocs - autolinks - plugin mkdocs - awesome - pages - plugin mkdocs - mermaid2 - plugin Das Docker Image muss mit der aktuellsten Version der Dokumentation gebaut werden: docker build -t documentation:slim -f dockerfiles/slim/Dockerfile . Container aus aktuellem Image starten, der Webserver wird hier auf Port 8080 verf\u00fcgbar gemacht: docker run -d -p 8080 :80/tcp --name docs documentation:slim PDF -Variante Die folgende Container-Definition wird f\u00fcr die PDF -Variante verwendet: FROM python:3.8-slim WORKDIR /tmp # Copy Python packages/dependencies file COPY dockerfiles/pdf/requirements.txt . # Install package dependencies and clean up afterwards RUN apt-get update \\ && apt-get install --no-install-recommends -y python3-cffi python3-brotli libpango-1.0-0 libpangoft2-1.0-0 chromium \\ && apt-get autoremove \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Update pip and install Python dependencies RUN python3 -m pip install --no-cache-dir -U pip RUN python3 -m pip install --no-cache-dir -r requirements.txt # Copy documentation source files to working directory COPY docs docs COPY dockerfiles/pdf/mkdocs.yml . # Build new documentation RUN ENABLE_PDF_EXPORT = 1 mkdocs build EXPOSE 80 # Run webserver CMD python -m http.server 80 -d site/ Die verwendeten Python-Pakete in der requirements.txt beautifulsoup4 == 4.9.3 mkdocs mkdocs - material == 7.3.6 mkdocs - autolinks - plugin mkdocs - awesome - pages - plugin mkdocs - mermaid2 - plugin mkdocs - with - pdf Die PDF -Variante wird mit PDF-Generierung realisiert. Das Docker Image muss mit der aktuellsten Version der Dokumentation gebaut werden: docker build -t documentation:pdf -f dockerfiles/pdf/Dockerfile . Container aus aktuellem Image starten, der Webserver wird hier auf Port 8080 verf\u00fcgbar gemacht: docker run -d -p 8080 :80/tcp --name docs documentation:pdf Build Prozess Das folgende Diagram zeigt den Prozess zur Erstellung eine neuen Container-Images mit der aktuellsten Dokumentation: graph TD; a1[\"requirements.txt kopieren\"]; a2[\"Python Dependencies aus requirements.txt installieren\"]; a3[\"Markdown Dokumentations-Dateien kopieren (docs-Ordner)\"]; a4[\"MkDocs Konfigurations-Datei kopieren\"]; a5[\"Dokumentation bauen\"]; a6[\"Webserver starten\"]; a1-->a2-->a3-->a4-->a5-->a6;","title":"Docker"},{"location":"docker/docker/#docker","text":"","title":"Docker"},{"location":"docker/docker/#image-varianten","text":"Das Docker Image wird in zwei unterschiedlichen Varianten angeboten, in beiden Varianten wird die Dokumentation als Webserver bereitgestellt. Auch die Funktionalit\u00e4ten in der Web-Version (z.B. selbstst\u00e4ndiges sortieren von Tabellen, gerenderte Mermaid-Diagramme, etc.) unterscheiden sich nicht. Der gro\u00dfe Unterschied ist die Generierung einer PDF aus der kompletten Dokumentation, diese ist \u00fcber den Webserver abrufbar. F\u00fcr die PDF-Generierung sind eine Anzahl an zus\u00e4tzlichen RPM- und Python-Paketen notwendig, dies f\u00fchrt zu einem gr\u00f6\u00dferen Image ( ~170 MB vs. ~765 MB). Wenn eine PDF nicht notwendig ist, sollte das slim -Image verwendet werden. Variante Gr\u00f6\u00dfe slim ~170 MB pdf ~765 MB","title":"Image-Varianten"},{"location":"docker/docker/#slim-variante","text":"Die folgende Container-Definition wird f\u00fcr die Slim -Variante verwendet: FROM python:3.8-slim WORKDIR /tmp # Copy Python packages/dependencies file COPY dockerfiles/slim/requirements.txt . # Update pip and install Python dependencies RUN python3 -m pip install --no-cache-dir -U pip RUN python3 -m pip install --no-cache-dir -r requirements.txt # Copy documentation source files to working directory COPY docs docs COPY dockerfiles/slim/mkdocs.yml . # Build new documentation RUN mkdocs build EXPOSE 80 # Run webserver CMD python -m http.server 80 -d site/ Die verwendeten Python-Pakete in der requirements.txt mkdocs mkdocs - material == 7.3.6 mkdocs - autolinks - plugin mkdocs - awesome - pages - plugin mkdocs - mermaid2 - plugin Das Docker Image muss mit der aktuellsten Version der Dokumentation gebaut werden: docker build -t documentation:slim -f dockerfiles/slim/Dockerfile . Container aus aktuellem Image starten, der Webserver wird hier auf Port 8080 verf\u00fcgbar gemacht: docker run -d -p 8080 :80/tcp --name docs documentation:slim","title":"Slim-Variante"},{"location":"docker/docker/#pdf-variante","text":"Die folgende Container-Definition wird f\u00fcr die PDF -Variante verwendet: FROM python:3.8-slim WORKDIR /tmp # Copy Python packages/dependencies file COPY dockerfiles/pdf/requirements.txt . # Install package dependencies and clean up afterwards RUN apt-get update \\ && apt-get install --no-install-recommends -y python3-cffi python3-brotli libpango-1.0-0 libpangoft2-1.0-0 chromium \\ && apt-get autoremove \\ && apt-get clean \\ && rm -rf /var/lib/apt/lists/* # Update pip and install Python dependencies RUN python3 -m pip install --no-cache-dir -U pip RUN python3 -m pip install --no-cache-dir -r requirements.txt # Copy documentation source files to working directory COPY docs docs COPY dockerfiles/pdf/mkdocs.yml . # Build new documentation RUN ENABLE_PDF_EXPORT = 1 mkdocs build EXPOSE 80 # Run webserver CMD python -m http.server 80 -d site/ Die verwendeten Python-Pakete in der requirements.txt beautifulsoup4 == 4.9.3 mkdocs mkdocs - material == 7.3.6 mkdocs - autolinks - plugin mkdocs - awesome - pages - plugin mkdocs - mermaid2 - plugin mkdocs - with - pdf Die PDF -Variante wird mit PDF-Generierung realisiert. Das Docker Image muss mit der aktuellsten Version der Dokumentation gebaut werden: docker build -t documentation:pdf -f dockerfiles/pdf/Dockerfile . Container aus aktuellem Image starten, der Webserver wird hier auf Port 8080 verf\u00fcgbar gemacht: docker run -d -p 8080 :80/tcp --name docs documentation:pdf","title":"PDF-Variante"},{"location":"docker/docker/#build-prozess","text":"Das folgende Diagram zeigt den Prozess zur Erstellung eine neuen Container-Images mit der aktuellsten Dokumentation: graph TD; a1[\"requirements.txt kopieren\"]; a2[\"Python Dependencies aus requirements.txt installieren\"]; a3[\"Markdown Dokumentations-Dateien kopieren (docs-Ordner)\"]; a4[\"MkDocs Konfigurations-Datei kopieren\"]; a5[\"Dokumentation bauen\"]; a6[\"Webserver starten\"]; a1-->a2-->a3-->a4-->a5-->a6;","title":"Build Prozess"},{"location":"entwicklungs-umgebung/live-preview/","text":"Live-Preview Der eingebaute Dev -Server erm\u00f6glicht es die Dokumentation schon w\u00e4hrend des Schreibens in der Vorschau zu betrachten. Er l\u00e4dt sogar automatisch neu und aktualisiert den Browser, wenn die \u00c4nderungen gespeichert werden. How-To Python Virtual Environment erstellen: pip3 -m venv mkdocs-venv VE aktivieren: source mkdocs-venv/bin/activcate Requirements installieren: pip3 install -r requirements.txt IP-Adresse herausfinden: hostname -I MkDocs built-in dev-server f\u00fcr live -Preview starten: mkdocs serve -a 172 .26.220.226:8080","title":"Live-Preview"},{"location":"entwicklungs-umgebung/live-preview/#live-preview","text":"Der eingebaute Dev -Server erm\u00f6glicht es die Dokumentation schon w\u00e4hrend des Schreibens in der Vorschau zu betrachten. Er l\u00e4dt sogar automatisch neu und aktualisiert den Browser, wenn die \u00c4nderungen gespeichert werden.","title":"Live-Preview"},{"location":"entwicklungs-umgebung/live-preview/#how-to","text":"Python Virtual Environment erstellen: pip3 -m venv mkdocs-venv VE aktivieren: source mkdocs-venv/bin/activcate Requirements installieren: pip3 install -r requirements.txt IP-Adresse herausfinden: hostname -I MkDocs built-in dev-server f\u00fcr live -Preview starten: mkdocs serve -a 172 .26.220.226:8080","title":"How-To"},{"location":"mkdocs/markdown-how-to/","text":"Markdown Syntax Markdown wurde mit den Grundgedanken konzipiert, so einfach lesbar und schreibbar wie m\u00f6glich zu sein. Lesbarkeit ist hierbei das oberste Ziel. Ein Markdown-formatiertes Dokument sollte in seiner Grundform ver\u00f6ffentlicht werden k\u00f6nnen, ohne den Anschein zu erwecken, es sei mit Tags oder Formatierungsbefehlen versehen (wie es bei HTML der Fall ist). Dementsprechend besteht Markdowns Syntax nur aus Zeichen, die mit Bedacht so gew\u00e4hlt wurden, dass ihr Aussehen ihrer Bedeutung entspricht. Zum Beispiel sehen Sternchen um ein Wort tats\u00e4chlich wie eine Betonung aus. Listen in Markdown sehen aus wie Listen. Sogar Zitat-Bl\u00f6cke sehen wie zitierte Textpassagen aus, wie man sie aus eMails kennt. \u00dcberschriften Kopfzeilen bzw. \u00dcberschriften werden in Markdown mit einer bis zu sechs Rauten-Zeichen definiert, je mehr Rauten-Zeichen verwendet werden, umso tiefer die Ebene der \u00dcberschrift. # \u00dcberschrift 1. Ebene ## \u00dcberschrift 2. Ebene ### \u00dcberschrift 3. Ebene","title":"Markdown Syntax"},{"location":"mkdocs/markdown-how-to/#markdown-syntax","text":"Markdown wurde mit den Grundgedanken konzipiert, so einfach lesbar und schreibbar wie m\u00f6glich zu sein. Lesbarkeit ist hierbei das oberste Ziel. Ein Markdown-formatiertes Dokument sollte in seiner Grundform ver\u00f6ffentlicht werden k\u00f6nnen, ohne den Anschein zu erwecken, es sei mit Tags oder Formatierungsbefehlen versehen (wie es bei HTML der Fall ist). Dementsprechend besteht Markdowns Syntax nur aus Zeichen, die mit Bedacht so gew\u00e4hlt wurden, dass ihr Aussehen ihrer Bedeutung entspricht. Zum Beispiel sehen Sternchen um ein Wort tats\u00e4chlich wie eine Betonung aus. Listen in Markdown sehen aus wie Listen. Sogar Zitat-Bl\u00f6cke sehen wie zitierte Textpassagen aus, wie man sie aus eMails kennt.","title":"Markdown Syntax"},{"location":"mkdocs/markdown-how-to/#uberschriften","text":"Kopfzeilen bzw. \u00dcberschriften werden in Markdown mit einer bis zu sechs Rauten-Zeichen definiert, je mehr Rauten-Zeichen verwendet werden, umso tiefer die Ebene der \u00dcberschrift. # \u00dcberschrift 1. Ebene ## \u00dcberschrift 2. Ebene ### \u00dcberschrift 3. Ebene","title":"\u00dcberschriften"},{"location":"mkdocs/mkdocs-elemente/","text":"Spezielle Elemente in MkDocs-Material Das Material-Theme ist eines der beliebtesten Themes f\u00fcr MkDocs und bringt einige Erweiterungen f\u00fcr die visuell ansprechene Gestaltung eurer Dokumentation mit. Eine vollst\u00e4ndige \u00dcbersicht inklusive Codebeispielen findet sich hier , einige Highlights haben wir auf dieser Seite eingebaut. Admonitions Admonitions, auch Call-Outs genannt, sind eine gute Wahl um zus\u00e4tzliche Inhalte einzuf\u00fcgen, ohne den Dokumentfluss wesentlich zu unterbrechen. MkDocs bietet mehrere verschiedene Arten von Admonitions und erm\u00f6glicht Verschachtelung beliebiger Inhalte. Admonition Es gibt eine gro\u00dfe Anzahl Typen von Admonitions , die alle h\u00e4ufigen Nutzungszwecke abdecken. Beipiele sind alert , warning , info und success . Codebl\u00f6cke Auch Codebl\u00f6cke lassen sich sehr einfach einf\u00fcgen und werden automatisch mit einem Kopieren -Button versehen. Sie werden \u00fcber drei Backticks eingefasst. Wenn zu Beginn des Codeblocks die entsprechende Codesprache angegeben wird erg\u00e4nzt MkDocs farbliche passende Syntax-Highlights. Hier beispielsweise im YAML-Format: ```yaml site_name: CC Documentation as Code Template copyright: Copyright &copy; Computacenter 2022 ``` Dieser Code-Block wird folgenderma\u00dfen dargestellt: site_name : CC Documentation as Code Template copyright : Copyright &copy; Computacenter 2022 Einzelne Zeilen in Code-Bl\u00f6cken k\u00f6nnen folgenderma\u00dfen hervorgehoben werden, Zeilen k\u00f6nnen nummeriert werden: ```py hl_lines=\"2 3\" linenums=\"1\" def sort_ip(unsorted_ip_list): \"\"\" Sort list of IP addresses \"\"\" if not isinstance(unsorted_ip_list, list): raise AnsibleFilterTypeError(\"Filter needs list input, got '%s'\" % type(unsorted_ip_list)) else: sorted_ip_list = sorted(unsorted_ip_list, key=netaddr.IPAddress) return sorted_ip_list ``` In MkDocs wird der Block entsprechend dargestellt: 1 2 3 4 5 6 7 8 9 def sort_ip ( unsorted_ip_list ): \"\"\" Sort list of IP addresses \"\"\" if not isinstance ( unsorted_ip_list , list ): raise AnsibleFilterTypeError ( \"Filter needs list input, got ' %s '\" % type ( unsorted_ip_list )) else : sorted_ip_list = sorted ( unsorted_ip_list , key = netaddr . IPAddress ) return sorted_ip_list Tabs Besonders praktisch f\u00fcr die Darstellungen von Code f\u00fcr verschiedene Umgebungen oder leicht abweichende Befehle eignet sich der Einsatz von Tab-Bars: RHEL Ubuntu Solaris yum install python3-pip -y sudo apt install python3-pip pkgadd -d http://get.opencsw.org/now /opt/csw/bin/pkgutil -U /opt/csw/bin/pkgutil -y -i py_pip /usr/sbin/pkgchk -L CSWpy-pip # list files Listen Auch (statische!) Listen sind in den verschiedensten Formen m\u00f6glich, zum Beispiel als ToDo-Liste. Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Tabellen Alle Tabellen k\u00f6nnen in MkDocs selbstst\u00e4ndig sortiert werden, in der Titelzeile kann durch einen Klick alphabetisch aufsteigend oder absteigend sortiert werden. Method Description GET Fetch resource PUT Update resource DELETE Delete resource Die Tabelle wird in Markdown folgenderma\u00dfen definiert. Hier werden zus\u00e4tzlich noch Symbole in der zweiten Spalte verwendet, diese werden durch zwei Doppelpunkte eingefasst: | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource |","title":"Spezielle Elemente in MkDocs-Material"},{"location":"mkdocs/mkdocs-elemente/#spezielle-elemente-in-mkdocs-material","text":"Das Material-Theme ist eines der beliebtesten Themes f\u00fcr MkDocs und bringt einige Erweiterungen f\u00fcr die visuell ansprechene Gestaltung eurer Dokumentation mit. Eine vollst\u00e4ndige \u00dcbersicht inklusive Codebeispielen findet sich hier , einige Highlights haben wir auf dieser Seite eingebaut.","title":"Spezielle Elemente in MkDocs-Material"},{"location":"mkdocs/mkdocs-elemente/#admonitions","text":"Admonitions, auch Call-Outs genannt, sind eine gute Wahl um zus\u00e4tzliche Inhalte einzuf\u00fcgen, ohne den Dokumentfluss wesentlich zu unterbrechen. MkDocs bietet mehrere verschiedene Arten von Admonitions und erm\u00f6glicht Verschachtelung beliebiger Inhalte. Admonition Es gibt eine gro\u00dfe Anzahl Typen von Admonitions , die alle h\u00e4ufigen Nutzungszwecke abdecken. Beipiele sind alert , warning , info und success .","title":"Admonitions"},{"location":"mkdocs/mkdocs-elemente/#codeblocke","text":"Auch Codebl\u00f6cke lassen sich sehr einfach einf\u00fcgen und werden automatisch mit einem Kopieren -Button versehen. Sie werden \u00fcber drei Backticks eingefasst. Wenn zu Beginn des Codeblocks die entsprechende Codesprache angegeben wird erg\u00e4nzt MkDocs farbliche passende Syntax-Highlights. Hier beispielsweise im YAML-Format: ```yaml site_name: CC Documentation as Code Template copyright: Copyright &copy; Computacenter 2022 ``` Dieser Code-Block wird folgenderma\u00dfen dargestellt: site_name : CC Documentation as Code Template copyright : Copyright &copy; Computacenter 2022 Einzelne Zeilen in Code-Bl\u00f6cken k\u00f6nnen folgenderma\u00dfen hervorgehoben werden, Zeilen k\u00f6nnen nummeriert werden: ```py hl_lines=\"2 3\" linenums=\"1\" def sort_ip(unsorted_ip_list): \"\"\" Sort list of IP addresses \"\"\" if not isinstance(unsorted_ip_list, list): raise AnsibleFilterTypeError(\"Filter needs list input, got '%s'\" % type(unsorted_ip_list)) else: sorted_ip_list = sorted(unsorted_ip_list, key=netaddr.IPAddress) return sorted_ip_list ``` In MkDocs wird der Block entsprechend dargestellt: 1 2 3 4 5 6 7 8 9 def sort_ip ( unsorted_ip_list ): \"\"\" Sort list of IP addresses \"\"\" if not isinstance ( unsorted_ip_list , list ): raise AnsibleFilterTypeError ( \"Filter needs list input, got ' %s '\" % type ( unsorted_ip_list )) else : sorted_ip_list = sorted ( unsorted_ip_list , key = netaddr . IPAddress ) return sorted_ip_list","title":"Codebl\u00f6cke"},{"location":"mkdocs/mkdocs-elemente/#tabs","text":"Besonders praktisch f\u00fcr die Darstellungen von Code f\u00fcr verschiedene Umgebungen oder leicht abweichende Befehle eignet sich der Einsatz von Tab-Bars: RHEL Ubuntu Solaris yum install python3-pip -y sudo apt install python3-pip pkgadd -d http://get.opencsw.org/now /opt/csw/bin/pkgutil -U /opt/csw/bin/pkgutil -y -i py_pip /usr/sbin/pkgchk -L CSWpy-pip # list files","title":"Tabs"},{"location":"mkdocs/mkdocs-elemente/#listen","text":"Auch (statische!) Listen sind in den verschiedensten Formen m\u00f6glich, zum Beispiel als ToDo-Liste. Lorem ipsum dolor sit amet, consectetur adipiscing elit Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque","title":"Listen"},{"location":"mkdocs/mkdocs-elemente/#tabellen","text":"Alle Tabellen k\u00f6nnen in MkDocs selbstst\u00e4ndig sortiert werden, in der Titelzeile kann durch einen Klick alphabetisch aufsteigend oder absteigend sortiert werden. Method Description GET Fetch resource PUT Update resource DELETE Delete resource Die Tabelle wird in Markdown folgenderma\u00dfen definiert. Hier werden zus\u00e4tzlich noch Symbole in der zweiten Spalte verwendet, diese werden durch zwei Doppelpunkte eingefasst: | Method | Description | | ----------- | ------------------------------------ | | `GET` | :material-check: Fetch resource | | `PUT` | :material-check-all: Update resource | | `DELETE` | :material-close: Delete resource |","title":"Tabellen"},{"location":"mkdocs/mkdocs-informationen/","text":"Allgemeine Information zu MkDocs MkDocs ist ein schneller und einfach zu bedienender Generator f\u00fcr statische Websites, der auf die Erstellung von Projektdokumentationen ausgerichtet ist. Die Quelldateien der Dokumentation werden in Markdown geschrieben und mit einer einzigen YAML-Konfigurationsdatei konfiguriert. Die vollst\u00e4ndige Dokumentation zu MkDocs ist hier zu finden. Vielzahl an Themes vorhanden Das Aussehen von MkDocs kann \u00fcber eine einzige Config-Zeile ver\u00e4ndert werden, es gibt unter anderem die folgenden, integrierten Themes. Weitere Themes (wie der aktuell genutzte Material -Theme) k\u00f6nnen \u00fcber Plugins nachtr\u00e4glich hinzugef\u00fcgt werden! Die vollst\u00e4ndige Dokumentation zum Material -Theme ist hier zu finden. Live-Preview Der eingebaute Dev -Server erm\u00f6glicht es die Dokumentation schon w\u00e4hrend des Schreibens in der Vorschau zu betrachten. Er l\u00e4dt sogar automatisch neu und aktualisiert den Browser, wenn die \u00c4nderungen gespeichert werden. Einfache Anpassbarkeit Die Projektdokumentation kann komplett den eigenen Vorstellungen angepasst werden, es sind viele Konfigurationsoptionen verf\u00fcgbar, alles innerhalb einer einzigen Konfigurationsdatei. \u00dcberall hosten MkDocs erstellt vollst\u00e4ndig statische HTML-Seiten, die auf Github Pages, Gitlab Pages, Amazon S3 oder in einem eigenen Webserver (hier in einem Docker-Container) gehostet werden k\u00f6nnen.","title":"Allgemeine Information zu MkDocs"},{"location":"mkdocs/mkdocs-informationen/#allgemeine-information-zu-mkdocs","text":"MkDocs ist ein schneller und einfach zu bedienender Generator f\u00fcr statische Websites, der auf die Erstellung von Projektdokumentationen ausgerichtet ist. Die Quelldateien der Dokumentation werden in Markdown geschrieben und mit einer einzigen YAML-Konfigurationsdatei konfiguriert. Die vollst\u00e4ndige Dokumentation zu MkDocs ist hier zu finden.","title":"Allgemeine Information zu MkDocs"},{"location":"mkdocs/mkdocs-informationen/#vielzahl-an-themes-vorhanden","text":"Das Aussehen von MkDocs kann \u00fcber eine einzige Config-Zeile ver\u00e4ndert werden, es gibt unter anderem die folgenden, integrierten Themes. Weitere Themes (wie der aktuell genutzte Material -Theme) k\u00f6nnen \u00fcber Plugins nachtr\u00e4glich hinzugef\u00fcgt werden! Die vollst\u00e4ndige Dokumentation zum Material -Theme ist hier zu finden.","title":"Vielzahl an Themes vorhanden"},{"location":"mkdocs/mkdocs-informationen/#live-preview","text":"Der eingebaute Dev -Server erm\u00f6glicht es die Dokumentation schon w\u00e4hrend des Schreibens in der Vorschau zu betrachten. Er l\u00e4dt sogar automatisch neu und aktualisiert den Browser, wenn die \u00c4nderungen gespeichert werden.","title":"Live-Preview"},{"location":"mkdocs/mkdocs-informationen/#einfache-anpassbarkeit","text":"Die Projektdokumentation kann komplett den eigenen Vorstellungen angepasst werden, es sind viele Konfigurationsoptionen verf\u00fcgbar, alles innerhalb einer einzigen Konfigurationsdatei.","title":"Einfache Anpassbarkeit"},{"location":"mkdocs/mkdocs-informationen/#uberall-hosten","text":"MkDocs erstellt vollst\u00e4ndig statische HTML-Seiten, die auf Github Pages, Gitlab Pages, Amazon S3 oder in einem eigenen Webserver (hier in einem Docker-Container) gehostet werden k\u00f6nnen.","title":"\u00dcberall hosten"}]}